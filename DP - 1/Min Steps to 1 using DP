/*
Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1.
You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - 1)
2.) If n is divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 )
3.) If n is divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 )

Input format : The first and the only line of input contains an integer value, 'n'.
Output format : Print the minimum number of steps.

Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 
*/


int helper(int n,int *ans){
    if(n<=1)
        return 0;
	if(ans[n] != -1)
        return ans[n];
    
	int x = helper(n - 1, ans);
	int y = INT_MAX, z = INT_MAX;
    
	if(n % 2 == 0)
        y = helper(n/2, ans);
	if(n % 3 == 0)
		z = helper(n/3, ans);
    
	int output = min(x, min(y, z)) + 1;
	ans[n] = output;
	return output;
}
int countStepsToOne(int n){
	int *ans = new int[n+1];
	for(int i = 0; i <= n; i++) {
		ans[i] = -1;
	}
	return helper(n, ans);
}
