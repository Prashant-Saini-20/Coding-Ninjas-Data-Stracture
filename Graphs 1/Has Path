/*
Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), check if there exists any path between them or not.
Print true if the path exists and false otherwise.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.

Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true
*/


#include <iostream>
#include <queue>
using namespace std;

bool hasPath(int **edges,int n,bool *visited,int v1,int v2){
	
    if(edges[v1][v2]==1) return true;
	
	visited[v1] = true;
    bool ans=false;
    
	for(int i=0 ;i<n ;i++){		
        if(!visited[i] && edges[v1][i]==1)
            ans=hasPath(edges,n,visited,i,v2);
        	if(ans==true) return true;
    }
    return ans;
}


int main(){
	int n,e;
	cin >> n >> e;
    if(n==0||e==0) return false;
    else{
        int **edges = new int*[n];
        for(int i=0;i<n;i++){
            edges[i] = new int[n];
            for(int j=0;j<n;j++){
                edges[i][j] = 0;
            }
        }
        for(int i=0;i<e;i++){
            int f,s;
            cin >> f >> s;
            edges[f][s] = 1;
            edges[s][f] = 1;
        }
        int v1,v2;
        cin >> v1 >> v2;
        
        bool *visited=new bool[n];
    	for(int i=0;i<n;i++) visited[i] = false;
        
        bool ans=hasPath(edges,n,visited,v1,v2);
        if(ans==1) cout << "true";
        else cout << "false";   
    }
}
