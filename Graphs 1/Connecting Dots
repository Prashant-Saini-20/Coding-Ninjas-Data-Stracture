/*
Gary has a board of size NxM. Each cell in the board is a coloured dot.
There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game.
The key of this game is to find a cycle that contain dots of same colour.
Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:

Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true
*/


int getCount(vector<vector<char>> &board,int n,int m,int i,int j,bool **visited,char ch){
    
    visited[i][j]=true;
    int count=0;
    
    if(0<=j+1 && j+1<m && !visited[i][j+1] && board[i][j+1]==ch)
        count+=getCount(board,n,m,i,j+1,visited,ch);
    
    if(0<=j-1 && j-1<m && !visited[i][j-1] && board[i][j-1]==ch)
        count+=getCount(board,n,m,i,j-1,visited,ch);
    
    if(0<=i-1 && i-1<n && !visited[i-1][j] && board[i-1][j]==ch)
    	count+=getCount(board,n,m,i-1,j,visited,ch);
    
    if(0<=i+1 && i+1<n && !visited[i+1][j] && board[i+1][j]==ch)
        count+=getCount(board,n,m,i+1,j,visited,ch);
    
    return count+1;
}
bool hasCycle(vector<vector<char>> &board, int n, int m) {
    bool **visited=new bool*[n];
    for(int i=0;i<n;i++){
        visited[i]=new bool[n];
        for(int j=0;j<n;j++) visited[i][j]=false;
    }
    int x=0;
    int max=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!visited[i][j]){
                x=getCount(board,n,m,i,j,visited,board[i][j]);
                if(max<x) max=x;
            }
        }
    }
    if(max>4) return true;
    else return false;
}
