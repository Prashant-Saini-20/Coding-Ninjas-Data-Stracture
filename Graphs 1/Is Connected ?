/*
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.

Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
*/


#include <iostream>
#include <queue>
using namespace std;

void checkBFS(int **edges, int n, int sv, bool *visited){
	queue<int> q;
	q.push(sv);
	visited[sv] = true;
	while(!q.empty()){
		int first=q.front();
		q.pop();
		for(int i=0;i<n;i++){
			if(edges[first][i]==1 && !visited[i]){
				visited[i]=true;
				q.push(i);
			}
		}
	}
}
bool check(int **edges, int n){
    bool *visited=new bool[n];
    for(int i=0;i<n;i++) visited[i] = false;
    
    checkBFS(edges,n,0,visited);
    
    for(int i=0;i<n;i++){
        if(!visited[i]) return false;
    }
    return true;
}
int main(){
	int n,e;
	cin >> n >> e;
    int **edges = new int*[n];
    for(int i=0;i<n;i++){
        edges[i] = new int[n];
        for(int j=0;j<n;j++) edges[i][j] = 0;
    }
	for(int i=0;i<e;i++){
        int f,s;
        cin >> f >> s;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    if(check(edges,n)) cout << "true";
    else cout << "false";
}
