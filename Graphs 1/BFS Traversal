/*
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well

Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2
*/


#include <iostream>
#include <queue>
using namespace std;

void printBFS(int **edges, int n, int sv, bool *visited){
	
	queue<int> q;
	q.push(sv);
	visited[sv] = true;
	while(!q.empty()){
		int first=q.front();
		q.pop();
		cout << first << " ";
		for(int i=0;i<n;i++){
			if(edges[first][i]==1 && !visited[i]){
				visited[i]=true;
				q.push(i);
			}
		}
	}
}
void BFS(int **edges, int n){
    bool *visited=new bool[n];
    for(int i=0;i<n;i++) visited[i] = false;
    for(int i=0;i<n;i++){
        if(!visited[i]) printBFS(edges,n,i,visited);
    }
	delete [] visited;
}
int main(){
	int n,e;
	cin >> n >> e;
    if(e==0){
        for(int i=0;i<n;i++) cout << i << " ";
    }
    else{
        int **edges = new int*[n];
        for(int i=0;i<n;i++){
            edges[i] = new int[n];
            for(int j=0;j<n;j++){
                edges[i][j] = 0;
            }
        }
        for(int i=0;i<e;i++){
            int f,s;
            cin >> f >> s;
            edges[f][s] = 1;
            edges[s][f] = 1;
        }
        BFS(edges,n);
    }
}
