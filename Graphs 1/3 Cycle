/*
Given a graph with N vertices (numbered from 0 to N-1) and M undirected edges, then count the distinct 3-cycles in the graph.
A 3-cycle PQR is a cycle in which (P,Q), (Q,R) and (R,P) are connected by an edge.

Sample Input 1:
3 3
0 1
1 2
2 0
Sample Output 1:
1
*/


#include <iostream>
using namespace std;

void countEdge(int **edges, int n){
    int count=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(edges[i][j]==1){
                for(int k=0;k<n;k++){
                    if(edges[j][k]==1){
                        if(edges[k][i]==1) count++;
                    }
                }
            }
            
        }
    }
    cout << count/6 ;
}
int main() {
    int n,ed;
	cin >> n >> ed;
    int **edges = new int*[n];
    for(int i=0;i<n;i++){
        edges[i] = new int[n];
        for(int j=0;j<n;j++){
            edges[i][j] = 0;
        }
    }
    for(int i=0;i<ed;i++){
        int f,s;
        cin >> f >> s;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    countEdge(edges,n);
}
