/*
For the given infinite supply of coins of each of denominations, D = {D0, D1, D2, D3, ...... Dn-1}.
You need to figure out the total number of ways W, in which you can make the change for Value V using coins of denominations D.
Return 0 if the change isn't possible.

Sample Input 1 :
3
1 2 3
4
Sample Output 1 :
4
Explanation to Sample Input 1 :
Number of ways are - 4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2).
*/


int countWaysToMakeChange(int denominations[], int size, int value){
	int i, j, x, y;

    // We need n+1 rows as the table is constructed in bottom up
    // manner using the base case 0
    // value case (value = 0)
    int output[value + 1][size];
    
    // Fill the entries for 0 value case (value = 0)
    for (j = 0; j < size; j++)
        output[0][j] = 1;

    // Fill rest of the output entries in bottom up manner 
    for (i = 1; i <= value ; i++){
        
        for (j = 0; j < size; j++){
            
            // Count of solutions including denominations[j]
            x = (i-denominations[j] >= 0) ? output[i - denominations[j]][j] : 0;

            // Count of solutions excluding denominations[j]
            y = (j >= 1) ? output[i][j - 1] : 0;

            // total count
            output[i][j] = x + y;
        }
    }
    return output[value][size - 1];
}
