/*
You are given two strings S and T of lengths M and N, respectively. Find the 'Edit Distance' between the strings.
Edit Distance of two strings is the minimum number of steps required to make one string equal to the other.

In order to do so, you can perform the following three operations:
1. Delete a character
2. Replace a character with another one
3. Insert a character

Sample Input 1 :
abc
dc
Sample Output 1 :
2
*/


/*int helper(string s1,string s2, int **output){
    int m=s1.size();
    int n=s2.size();
    if(m==0) return n;
    if(n==0) return m;
    
    if(output[m][n]!=-1){
        return output[m][n];
    }
    int ans;
    if(s1[0]==s2[0]){
        ans=helper(s1.substr(1),s2.substr(1),output);
    }
    else{
        int ins=helper(s1.substr(1),s2,output);
    	int del=helper(s1,s2.substr(1),output);
    	int upd=helper(s1.substr(1),s2.substr(1),output);
        
    	ans=min(ins,min(del,upd))+1;
    }
    output[m][n]=ans;
    return ans;
}
int editDistance(string s1, string s2){
	//MEMOIZATION
    int m=s1.size();
    int n=s2.size();
    int **output = new int*[m+1];
	for(int i=0;i<=m;i++) {
		output[i]=new int[n+1];
		for(int j=0;j<=n;j++) {
			output[i][j]=-1;
		}
	}
    return helper(s1,s2,output);
}*/

int editDistance(string s1, string s2){
    //DYNAMIC PROGRAMMING
    int m=s1.size();
    int n=s2.size();
    int **output = new int*[m+1];
	for(int i=0;i<=m;i++) {
		output[i]=new int[n+1];
    }
    for(int i=0;i<=m;i++){
        output[i][0]=i;
    }
    for(int j=0;j<=n;j++){
        output[0][j]=j;
    }
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(s1[m-i]==s2[n-j]){
                output[i][j]=output[i-1][j-1];
            }
            else{
                int ins=output[i-1][j];
                int del=output[i][j-1];
                int upd=output[i-1][j-1];
                
                output[i][j]=min(ins,min(del,upd))+1;
            }
        }
    }
    return output[m][n];
}
