/*
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
For each vertex, print its vertex number and its distance from source, in a separate line. The vertex number and its distance needs to be separated by a single space.

Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 0
1 3
2 4
3 5
*/


#include <iostream>
#include <climits>
using namespace std;

int find(int *distance,bool *visited,int n){
    int minVtx=-1;
    for(int i=0;i<n;i++){
        if(!visited[i] && ( minVtx==-1 || distance[i] < distance[minVtx] )){
            minVtx=i;
        }
    }
    return minVtx;
}

void Dijkstra(int **adjMtx,int n){
    int *distance=new int[n];
    bool *visited=new bool[n];
    
    for(int i=0;i<n;i++){
        distance[i]=INT_MAX;
        visited[i]=false;
    }
    distance[0]=0;
    
    for(int i=0;i<n;i++){
        
        int minVtx=find(distance,visited,n);
        visited[minVtx]=true;
        for(int j=0;j<n;j++){
            
            if(!visited[j] && adjMtx[minVtx][j]>0){
                int dist=distance[minVtx]+adjMtx[minVtx][j];
                if(dist < distance[j])
                    distance[j]=dist;
            }
        }
    }
    for(int i=0;i<n;i++){
        cout << i << " " << distance[i] << endl;
    }
}

int main() {
    int n,e;
    cin >> n >> e;
    
    int **adjMtx=new int*[n];
    for(int i=0;i<n;i++){
        adjMtx[i]=new int[n];
        for(int j=0;j<n;j++){
            adjMtx[i][j]=0;
        }
    }
    
    for(int i=0;i<e;i++){
        int s,d,w;
        cin >> s >> d >> w;
        adjMtx[s][d]=w;
        adjMtx[d][s]=w;
    }
    
    Dijkstra(adjMtx,n);
    
    for(int i=0;i<n;i++){
        delete adjMtx[i];
    }
    delete adjMtx;
}
