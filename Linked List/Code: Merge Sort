/*
Given a singly linked list of integers, sort it using 'Merge Sort.'

Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.

Sample Input 1 :
1
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
3 4 5 6 7 8 9 10 
*/

Node *Mid(Node *head){
    
    if(head==NULL) return head;
    Node *slow=head;
    Node *fast=head->next;
    while(fast){
        if(fast->next==NULL) break;
        else{
            slow=slow->next;
            fast=fast->next->next;
        } 
    }   
    Node *ans=slow->next;
    slow->next=NULL;
    return ans;
}
Node *Merge(Node *head1,Node *head2){
    
    if(head1==NULL && head2==NULL) return NULL;
    if(head1==NULL) return head2;
    if(head2==NULL) return head1;
    Node *head=NULL,*tail=NULL;
    if(head1->data < head2->data){
        head=head1;
        tail=head1;
        head1=head1->next;
    }
    else{
        head=head2;
        tail=head2;
        head2=head2->next;
    }
    while(head1 && head2){
        if(head1->data < head2->data){
            tail->next=head1;
            tail=head1;
            head1=head1->next;
        }
        else{
            tail->next=head2;
            tail=head2;
            head2=head2->next;
        }
    }
   while(head1){
       tail->next=head1;
       head1=head1->next;
       tail=tail->next;
   }
     while(head2){
       tail->next=head2;
       head2=head2->next;
       tail=tail->next;
   }
    return head;
}
Node *mergeSort(Node *head){
    
	if(head==NULL||head->next==NULL) return head;
    
    Node *secondHead=Mid(head);
    Node *sortedHalf1=mergeSort(head);
    Node *sortedHalf2=mergeSort(secondHead);
    Node *finalAns=Merge(sortedHalf1,sortedHalf2);
    
    return finalAns;
}
